
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * The MIT License
 *
 * Copyright 2017 Nikolas Laskaris.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 *
 * @author Nikolas Laskaris
 */
public class ElectionGUI2 extends javax.swing.JFrame {

    private Election newElection;
    private int n = 300;
    private int m = 100;
    private int nClusters = 1;
    private int mClusters = 1;
    private int k = 10;
    private int xLimit = 6;
    private int yLimit = 6;
    
    /**
     * Creates new form ElectionGUI2
     */
    public ElectionGUI2() {
        initComponents();
    }
    
    public void setNewElection (Election newElection){
        this.newElection = newElection;
    }
    
    public Election getNewElection (){
        return newElection;
    }
    
    public void setN(int n){
        this.n = n;
    }
    
    public int getN(){
        return n;
    }
    
    public void setNClusters(int nClusters){
        this.nClusters = nClusters;
    }
    
    public int getNClusters(){
        return nClusters;
    }
    
    public void setM(int m){
        this.m = m;
    }
    
    public int getM(){
        return m;
    }
    
    public void setMClusters(int mClusters){
        this.mClusters = mClusters;
    }
    
    public int getMClusters(){
        return mClusters;
    }
    
    public void setK(int k){
        this.k = k;
    }
    
    public int getK(){
        return k;
    }
    
    public void setXRange(int xRange){
        this.xLimit = xRange;
    }
    
    public int getXRange(){
        return xLimit;
    }
    
    
    public void setYRange(int yRange){
        this.yLimit = yRange;
    }
    
    public int getYRange(){
        return yLimit;
    }
    
    /**
     * This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        plotAreaSTV = new javax.swing.JPanel();
        plotAreaGCC = new javax.swing.JPanel();
        plotAreaGM = new javax.swing.JPanel();
        plotAreaKM = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        mainTitle = new javax.swing.JLabel();
        nLabel = new javax.swing.JLabel();
        mLabel = new javax.swing.JLabel();
        kLabel = new javax.swing.JLabel();
        nTxtField = new javax.swing.JTextField();
        mTxtField = new javax.swing.JTextField();
        kTxtField = new javax.swing.JTextField();
        nClusterTitle = new javax.swing.JLabel();
        nClusterLabel = new javax.swing.JLabel();
        nClusterTxtField = new javax.swing.JTextField();
        mClusterTitle = new javax.swing.JLabel();
        mClusterLabel = new javax.swing.JLabel();
        mClusterTxtField = new javax.swing.JTextField();
        createElectionBtn = new javax.swing.JButton();
        saveElectionBtn = new javax.swing.JButton();
        loadElectionBtn = new javax.swing.JButton();
        plotResultsBtn = new javax.swing.JButton();
        xLimitLabel = new javax.swing.JLabel();
        xLimitTxtField = new javax.swing.JTextField();
        yLimitLabel = new javax.swing.JLabel();
        yLimitTxtField = new javax.swing.JTextField();
        plotAreaSNTV = new javax.swing.JPanel();
        plotAreaBorda = new javax.swing.JPanel();
        plotAreaBloc = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {300, 300, 300, 300};
        layout.rowHeights = new int[] {300, 300, 80};
        getContentPane().setLayout(layout);

        plotAreaSTV.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaSTV.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaSTV.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaSTV.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaSTVLayout = new javax.swing.GroupLayout(plotAreaSTV);
        plotAreaSTV.setLayout(plotAreaSTVLayout);
        plotAreaSTVLayout.setHorizontalGroup(
            plotAreaSTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaSTVLayout.setVerticalGroup(
            plotAreaSTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaSTV, gridBagConstraints);

        plotAreaGCC.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaGCC.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaGCC.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaGCC.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaGCCLayout = new javax.swing.GroupLayout(plotAreaGCC);
        plotAreaGCC.setLayout(plotAreaGCCLayout);
        plotAreaGCCLayout.setHorizontalGroup(
            plotAreaGCCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaGCCLayout.setVerticalGroup(
            plotAreaGCCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaGCC, gridBagConstraints);

        plotAreaGM.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaGM.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaGM.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaGM.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaGMLayout = new javax.swing.GroupLayout(plotAreaGM);
        plotAreaGM.setLayout(plotAreaGMLayout);
        plotAreaGMLayout.setHorizontalGroup(
            plotAreaGMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaGMLayout.setVerticalGroup(
            plotAreaGMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaGM, gridBagConstraints);

        plotAreaKM.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaKM.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaKM.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaKM.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaKMLayout = new javax.swing.GroupLayout(plotAreaKM);
        plotAreaKM.setLayout(plotAreaKMLayout);
        plotAreaKMLayout.setHorizontalGroup(
            plotAreaKMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaKMLayout.setVerticalGroup(
            plotAreaKMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaKM, gridBagConstraints);

        menuPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        menuPanel.setMaximumSize(new java.awt.Dimension(300, 380));
        menuPanel.setMinimumSize(new java.awt.Dimension(300, 380));
        menuPanel.setPreferredSize(new java.awt.Dimension(300, 380));
        java.awt.GridBagLayout menuPanelLayout = new java.awt.GridBagLayout();
        menuPanelLayout.columnWidths = new int[] {50, 50, 50, 50, 50, 50};
        menuPanelLayout.rowHeights = new int[] {40, 20, 20, 20, 5, 20, 20, 30, 20, 30, 20, 20, 40, 40};
        menuPanel.setLayout(menuPanelLayout);

        mainTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitle.setText("Create a 2D Committee Election");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(mainTitle, gridBagConstraints);

        nLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nLabel.setText("Number of Voters: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(nLabel, gridBagConstraints);

        mLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mLabel.setText("Number of Candidates: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(mLabel, gridBagConstraints);

        kLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        kLabel.setText("Committee Size: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(kLabel, gridBagConstraints);

        nTxtField.setText("300");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(nTxtField, gridBagConstraints);

        mTxtField.setText("100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(mTxtField, gridBagConstraints);

        kTxtField.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(kTxtField, gridBagConstraints);

        nClusterTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        nClusterTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nClusterTitle.setText("Voter Distribution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(nClusterTitle, gridBagConstraints);

        nClusterLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nClusterLabel.setText("Number of Voter Clusters: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(nClusterLabel, gridBagConstraints);

        nClusterTxtField.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(nClusterTxtField, gridBagConstraints);

        mClusterTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        mClusterTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mClusterTitle.setText("Candidate Distribution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(mClusterTitle, gridBagConstraints);

        mClusterLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mClusterLabel.setText("Number of Candidate Clusters: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(mClusterLabel, gridBagConstraints);

        mClusterTxtField.setText("1");
        mClusterTxtField.setMaximumSize(new java.awt.Dimension(50, 20));
        mClusterTxtField.setMinimumSize(new java.awt.Dimension(50, 20));
        mClusterTxtField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(mClusterTxtField, gridBagConstraints);

        createElectionBtn.setText("Create Election");
        createElectionBtn.setMaximumSize(new java.awt.Dimension(110, 23));
        createElectionBtn.setMinimumSize(new java.awt.Dimension(110, 23));
        createElectionBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        createElectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createElectionBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        menuPanel.add(createElectionBtn, gridBagConstraints);

        saveElectionBtn.setText("Save Election");
        saveElectionBtn.setMaximumSize(new java.awt.Dimension(110, 23));
        saveElectionBtn.setMinimumSize(new java.awt.Dimension(110, 23));
        saveElectionBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        menuPanel.add(saveElectionBtn, gridBagConstraints);

        loadElectionBtn.setText("Load Election");
        loadElectionBtn.setMaximumSize(new java.awt.Dimension(110, 23));
        loadElectionBtn.setMinimumSize(new java.awt.Dimension(110, 23));
        loadElectionBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        loadElectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadElectionBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        menuPanel.add(loadElectionBtn, gridBagConstraints);

        plotResultsBtn.setText("Plot Results");
        plotResultsBtn.setEnabled(false);
        plotResultsBtn.setMaximumSize(new java.awt.Dimension(110, 23));
        plotResultsBtn.setMinimumSize(new java.awt.Dimension(110, 23));
        plotResultsBtn.setPreferredSize(new java.awt.Dimension(110, 23));
        plotResultsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotResultsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        menuPanel.add(plotResultsBtn, gridBagConstraints);

        xLimitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        xLimitLabel.setText("x-Axis bound: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(xLimitLabel, gridBagConstraints);

        xLimitTxtField.setText("3");
        xLimitTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xLimitTxtFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(xLimitTxtField, gridBagConstraints);

        yLimitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        yLimitLabel.setText("y-Axis bound: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(yLimitLabel, gridBagConstraints);

        yLimitTxtField.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        menuPanel.add(yLimitTxtField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(menuPanel, gridBagConstraints);

        plotAreaSNTV.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaSNTV.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaSNTV.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaSNTV.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaSNTVLayout = new javax.swing.GroupLayout(plotAreaSNTV);
        plotAreaSNTV.setLayout(plotAreaSNTVLayout);
        plotAreaSNTVLayout.setHorizontalGroup(
            plotAreaSNTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaSNTVLayout.setVerticalGroup(
            plotAreaSNTVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaSNTV, gridBagConstraints);

        plotAreaBorda.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaBorda.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaBorda.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaBorda.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaBordaLayout = new javax.swing.GroupLayout(plotAreaBorda);
        plotAreaBorda.setLayout(plotAreaBordaLayout);
        plotAreaBordaLayout.setHorizontalGroup(
            plotAreaBordaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaBordaLayout.setVerticalGroup(
            plotAreaBordaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaBorda, gridBagConstraints);

        plotAreaBloc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        plotAreaBloc.setMaximumSize(new java.awt.Dimension(300, 300));
        plotAreaBloc.setMinimumSize(new java.awt.Dimension(300, 300));
        plotAreaBloc.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout plotAreaBlocLayout = new javax.swing.GroupLayout(plotAreaBloc);
        plotAreaBloc.setLayout(plotAreaBlocLayout);
        plotAreaBlocLayout.setHorizontalGroup(
            plotAreaBlocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        plotAreaBlocLayout.setVerticalGroup(
            plotAreaBlocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(plotAreaBloc, gridBagConstraints);

        titlePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 896, Short.MAX_VALUE)
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(titlePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadElectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadElectionBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadElectionBtnActionPerformed

    private void createElectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createElectionBtnActionPerformed
        //Confirmation of discarding an election that is not saved
        boolean discard = true;
        if(newElection != null){
            int response = JOptionPane.showConfirmDialog(null, "Current election is not saved, are you sure you want to create a new election?\n"
                    + "Press No to save current election in a file.", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                discard = false;
            }
        }
        
        
        if (discard){
            
            //Input validation
            String err = "";
            String eol = System.getProperty("line.separator");
            
            try{
                int x = Integer.parseInt(nTxtField.getText());
                if (x < 1 || x > 1000){
                    throw (new Exception());
                }
                n = x;
            }
            catch(Exception e){
                nTxtField.setBackground(Color.cyan);
                err = err + "Enter a valid voter population (max 1000)." + eol;
            }
            
            try{
                int x = Integer.parseInt(mTxtField.getText());
                if (x < 1 || x > 1000){
                    throw (new Exception());
                }
                m = x;
            }
            catch(Exception e){
                mTxtField.setBackground(Color.cyan);
                err = err + "Enter a valid candidate population (max 1000)." + eol;
            }
            
            try{
                int x = Integer.parseInt(kTxtField.getText());
                if (x < 1 || x > 100){
                    throw (new Exception());
                }
                k = x;
            }
            catch(Exception e){
                kTxtField.setBackground(Color.cyan);
                err = err + "Enter a valid committee size (max 100)." + eol;
            }
            
            try{
                int x = Integer.parseInt(xLimitTxtField.getText());
                if (x < 1 || x > 100){
                    throw (new Exception());
                }
                xLimit = x;
            }
            catch(Exception e){
                xLimitTxtField.setBackground(Color.cyan);
                err = err + "Maximum x-Axis value goes up to 100." + eol;
            }
            
            try{
                int x = Integer.parseInt(yLimitTxtField.getText());
                if (x < 1 || x > 100){
                    throw (new Exception());
                }
                yLimit = x;
            }
            catch(Exception e){
                yLimitTxtField.setBackground(Color.cyan);
                err = err + "Maximum y-Axis value goes up to 100." + eol;
            }
            
            try{
                int x = Integer.parseInt(nClusterTxtField.getText());
                if (x < 1 || x > 20){
                    throw (new Exception());
                }
                nClusters = x;
            }
            catch(Exception e){
                nClusterTxtField.setBackground(Color.cyan);
                err = err + "Maximum number of voter clusters is 20." + eol;
            }
            
            try{
                int x = Integer.parseInt(mClusterTxtField.getText());
                if (x < 1 || x > 20){
                    throw (new Exception());
                }
                mClusters = x;
            }
            catch(Exception e){
                mClusterTxtField.setBackground(Color.cyan);
                err = err + "Maximum number of candidate clusters is 20." + eol;
            }
            
            if (err != ""){
                JOptionPane.showMessageDialog(this, err);
            }
            else {
                nTxtField.setBackground(Color.white);
                mTxtField.setBackground(Color.white);
                kTxtField.setBackground(Color.white);
                xLimitTxtField.setBackground(Color.white);
                yLimitTxtField.setBackground(Color.white);
                nClusterTxtField.setBackground(Color.white);
                mClusterTxtField.setBackground(Color.white);
                
                ArrayList<Voter> voters = new ArrayList();
                ArrayList<Candidate> candidates = new ArrayList();

                int tempN = n;
                int tempM = m;

                boolean finalCluster = false;
                boolean cancelled = false;

                for(int i = 0; i < nClusters; i++){
                    String title = "Voter Cluster " + (i+1) + "/" + nClusters;
                    String footnote = "Voters remaining: " + tempN;
                    if (i+1 == nClusters){
                        finalCluster = true;
                    }
                    DistributionDialog dd = new DistributionDialog(this, true, tempN, xLimit, yLimit, Person.personType.VOTER, title, footnote, finalCluster);
                    dd.setVisible(true);
                    if (dd.isCancelled()){
                        cancelled = true;
                        break;
                    }
                    tempN = tempN - dd.getClusterSize();
                    voters.addAll((ArrayList<Voter>)(ArrayList<?>)dd.getIndividuals());
                }  

                finalCluster = false;
                if (!cancelled){
                    for(int i = 0; i < mClusters; i++){
                        String title = "Candidate Cluster " + (i+1) + "/" + mClusters;
                        String footnote = "Candidates remaining: " + tempM;
                        if (i+1 == mClusters){
                            finalCluster = true;
                        }
                        DistributionDialog dd = new DistributionDialog(this, true, tempM, xLimit, yLimit, Person.personType.CANDIDATE, title, footnote, finalCluster);
                        dd.setVisible(true);
                        if (dd.isCancelled()){
                            cancelled = true;
                            break;
                        }
                        tempM = tempM - dd.getClusterSize();
                        candidates.addAll((ArrayList<Candidate>)(ArrayList<?>)dd.getIndividuals());
                    }  
                }

                if (!cancelled){
                    newElection = new Election(k, voters, candidates);
                    plotResultsBtn.setEnabled(true);
                }
            } 
        }
    }//GEN-LAST:event_createElectionBtnActionPerformed

    private void plotResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotResultsBtnActionPerformed
        
        ArrayList<Candidate> committeeSNTV = newElection.singleNonTrasferableVote();
        ArrayList<Candidate> committeeBorda = newElection.kBorda();
        ArrayList<Candidate> committeeBloc = newElection.bloc();
        ArrayList<Candidate> committeeSTV = newElection.singleTransferableVote();
        ArrayList<Candidate> committeeGCC = newElection.greedyCC();
        ArrayList<Candidate> committeeGM = newElection.greedyMonroe();
        ArrayList<Candidate> committeeKM = newElection.kMeans();
        
        XYSeriesCollection datasetSNTV = new XYSeriesCollection();
        XYSeriesCollection datasetBorda = new XYSeriesCollection();
        XYSeriesCollection datasetBloc = new XYSeriesCollection();
        XYSeriesCollection datasetSTV = new XYSeriesCollection();
        XYSeriesCollection datasetGCC = new XYSeriesCollection();
        XYSeriesCollection datasetGM = new XYSeriesCollection();
        XYSeriesCollection datasetKM = new XYSeriesCollection();
        
        XYSeries sntvComitteeDataset = new XYSeries("SNTV Committee");
        for (Candidate c: committeeSNTV) {
            sntvComitteeDataset.add(c.getX(), c.getY());
        }
        datasetSNTV.addSeries(sntvComitteeDataset);
        
        
        XYSeries bordaCommitteeDataset = new XYSeries("k-Borda Committee");
        for (Candidate c: committeeBorda) {
            bordaCommitteeDataset.add(c.getX(), c.getY());
        }
        datasetBorda.addSeries(bordaCommitteeDataset);
        
        
        XYSeries blocCommitteeDataset = new XYSeries("Bloc Committee");
        for (Candidate c: committeeBloc) {
            blocCommitteeDataset.add(c.getX(), c.getY());
        }
        datasetBloc.addSeries(blocCommitteeDataset);
        
        
        XYSeries stvCommitteeDataset = new XYSeries("STV Committee");
        for (Candidate c: committeeSTV) {
            stvCommitteeDataset.add(c.getX(), c.getY());
        }
        datasetSTV.addSeries(stvCommitteeDataset);
        
        
        XYSeries gccCommitteeDataset = new XYSeries("G-CC Committee");
        for (Candidate c: committeeGCC) {
            gccCommitteeDataset.add(c.getX(), c.getY());
        }
        datasetGCC.addSeries(gccCommitteeDataset);
        
        
        XYSeries gmCommitteeDataset = new XYSeries("G-Monroe Committee");
        for (Candidate c: committeeGM) {
            gmCommitteeDataset.add(c.getX(), c.getY());
        }
        datasetGM.addSeries(gmCommitteeDataset);
        
        
        XYSeries kMeansCommitteeDataset = new XYSeries("k-Means Committee");
        for (Candidate c: committeeKM) {
            kMeansCommitteeDataset.add(c.getX(), c.getY());
        }
        datasetKM.addSeries(kMeansCommitteeDataset);
        
        int skipN = n/120;
        if(skipN < 1){
            skipN = 1;
        }
        
        int skipM = m/120;
        if(skipM < 1){
            skipM = 1;
        }
        
        XYSeries voterDataset = new XYSeries("Voters");
        for (int i = 0; i < newElection.getVoters().size(); i++) {
            Voter v = newElection.getVoters().get(i);
            if (i%skipN == 0){
                voterDataset.add(v.getX(), v.getY());
            }
        }
        datasetSNTV.addSeries(voterDataset);
        datasetBorda.addSeries(voterDataset);
        datasetBloc.addSeries(voterDataset);
        datasetSTV.addSeries(voterDataset);
        datasetGCC.addSeries(voterDataset);
        datasetGM.addSeries(voterDataset);
        datasetKM.addSeries(voterDataset);
        
        XYSeries candidateDataset = new XYSeries("Candidates");
        for (int i = 0; i < newElection.getCandidates().size(); i++) {
            Candidate c = newElection.getCandidates().get(i);
            if (i%skipM == 0){
                candidateDataset.add(c.getX(), c.getY());
            }
        }
        datasetSNTV.addSeries(candidateDataset);
        datasetBorda.addSeries(candidateDataset);
        datasetBloc.addSeries(candidateDataset);
        datasetSTV.addSeries(candidateDataset);
        datasetGCC.addSeries(candidateDataset);
        datasetGM.addSeries(candidateDataset);
        datasetKM.addSeries(candidateDataset);
        
        JFreeChart chartSNTV = ChartFactory.createScatterPlot("SNTV", "x",
                "y", datasetSNTV, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelSNTV = new ChartPanel(chartSNTV);
        plotAreaSNTV.setLayout(new java.awt.BorderLayout());
        plotAreaSNTV.add(chartPanelSNTV,BorderLayout.CENTER);
        plotAreaSNTV.validate();
        
        JFreeChart chartBorda = ChartFactory.createScatterPlot("k-Borda", "x",
                "y", datasetBorda, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelBorda = new ChartPanel(chartBorda);
        plotAreaBorda.setLayout(new java.awt.BorderLayout());
        plotAreaBorda.add(chartPanelBorda,BorderLayout.CENTER);
        plotAreaBorda.validate();
        
        JFreeChart chartBloc = ChartFactory.createScatterPlot("Bloc", "x",
                "y", datasetBloc, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelBloc = new ChartPanel(chartBloc);
        plotAreaBloc.setLayout(new java.awt.BorderLayout());
        plotAreaBloc.add(chartPanelBloc,BorderLayout.CENTER);
        plotAreaBloc.validate();
        
        JFreeChart chartSTV = ChartFactory.createScatterPlot("STV", "x",
                "y", datasetSTV, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelSTV = new ChartPanel(chartSTV);
        plotAreaSTV.setLayout(new java.awt.BorderLayout());
        plotAreaSTV.add(chartPanelSTV,BorderLayout.CENTER);
        plotAreaSTV.validate();
        
        JFreeChart chartGCC = ChartFactory.createScatterPlot("Greedy-CC", "x",
                "y", datasetGCC, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelGCC = new ChartPanel(chartGCC);
        plotAreaGCC.setLayout(new java.awt.BorderLayout());
        plotAreaGCC.add(chartPanelGCC,BorderLayout.CENTER);
        plotAreaGCC.validate();
        
        JFreeChart chartGM = ChartFactory.createScatterPlot("Greedy-Monroe", "x",
                "y", datasetGM, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelGM = new ChartPanel(chartGM);
        plotAreaGM.setLayout(new java.awt.BorderLayout());
        plotAreaGM.add(chartPanelGM,BorderLayout.CENTER);
        plotAreaGM.validate();
        
        JFreeChart chartKM = ChartFactory.createScatterPlot("k-Means", "x",
                "y", datasetKM, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanelKM = new ChartPanel(chartKM);
        plotAreaKM.setLayout(new java.awt.BorderLayout());
        plotAreaKM.add(chartPanelKM,BorderLayout.CENTER);
        plotAreaKM.validate();
    }//GEN-LAST:event_plotResultsBtnActionPerformed

    private void xLimitTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xLimitTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xLimitTxtFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ElectionGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ElectionGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ElectionGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ElectionGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ElectionGUI2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createElectionBtn;
    private javax.swing.JLabel kLabel;
    private javax.swing.JTextField kTxtField;
    private javax.swing.JButton loadElectionBtn;
    private javax.swing.JLabel mClusterLabel;
    private javax.swing.JLabel mClusterTitle;
    private javax.swing.JTextField mClusterTxtField;
    private javax.swing.JLabel mLabel;
    private javax.swing.JTextField mTxtField;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JLabel nClusterLabel;
    private javax.swing.JLabel nClusterTitle;
    private javax.swing.JTextField nClusterTxtField;
    private javax.swing.JLabel nLabel;
    private javax.swing.JTextField nTxtField;
    private javax.swing.JPanel plotAreaBloc;
    private javax.swing.JPanel plotAreaBorda;
    private javax.swing.JPanel plotAreaGCC;
    private javax.swing.JPanel plotAreaGM;
    private javax.swing.JPanel plotAreaKM;
    private javax.swing.JPanel plotAreaSNTV;
    private javax.swing.JPanel plotAreaSTV;
    private javax.swing.JButton plotResultsBtn;
    private javax.swing.JButton saveElectionBtn;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JLabel xLimitLabel;
    private javax.swing.JTextField xLimitTxtField;
    private javax.swing.JLabel yLimitLabel;
    private javax.swing.JTextField yLimitTxtField;
    // End of variables declaration//GEN-END:variables
}
